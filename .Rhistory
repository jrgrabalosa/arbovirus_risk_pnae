library(readr)
data <- read_csv("Documentos/PhD/Data_analysis/PNAE/data.csv")
View(data)
View(data)
data <- data %>% filter(Country == "Spain")
library(readxl)
library(tidyverse)
library(ggplot2)
library(vegan)
library(factoextra)
data <- data %>% filter(Country == "Spain")
View(data)
library(tidyverse)
library(ggplot2)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Tourist data -----------------------------------------------------------------
municipis <- read.csv("Data/Human_data/mun.csv")
tourists <- read.csv("Data/Human_data/slc_tourist.csv")
# Dataframe with tourism data
tourists_mun <- merge(municipis,tourists,by="mun")
tourists_mun$year <- as.character(tourists_mun$year)
tourists_mun <- tourists_mun %>% filter(com == "2") # filter by region "Alt Empordà"
tourists_mun <- tourists_mun %>%
group_by(mun, name, longitude, latitude, year) %>%
summarise(acc = sum(f_tourist_acc),
beds = sum(f_tourist_beds)) # calculation of acc and beds for each municipality and year
tourists_comarca <- tourists_mun %>%
group_by(year) %>%
summarise(acc = sum(acc),
beds = sum(beds)) # calculation of acc and beds for the whole region
# Població estacional ----------------------------------------------------------
població_ETCA <- read.csv("Data/Human_data/Població_estacional_Alt_Empordà.csv")
població_estacional_ETCA <- població_ETCA %>%
dplyr::select(any, T1, T2, T3, T4) %>%
pivot_longer(!c(any),
names_to = "trimestre", values_to = "població_estacional")
View(població_estacional_ETCA)
població_estacional_ETCA$any <- as.factor(població_estacional_ETCA$any)
població_estacional_ETCA$trimestre <- as.factor(població_estacional_ETCA$trimestre)
plot <- població_estacional_ETCA %>%
# filter(any %in% c("2015", "2016", "2017", "2018")) %>%
ggplot(aes(x = trimestre, y = població_estacional, color = any, group = any)) +
geom_point(size = 0.5) +
geom_line(linewidth = 0.75) +
scale_color_brewer(palette = "Set1", name = "Year") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, color = any, group = any)) +
geom_point(size = 0.5) +
geom_bar(linewidth = 0.75) +
scale_color_brewer(palette = "Set1", name = "Year") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, color = any, group = any)) +
geom_point(size = 0.5) +
geom_bar(linewidth = 0.75) +
scale_color_brewer(palette = "Set1", name = "Year") +
facet_wrap(~any, scales = "free") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, color = any, group = any)) +
# geom_point(size = 0.5) +
geom_bar(linewidth = 0.75) +
scale_color_brewer(palette = "Set1", name = "Year") +
facet_wrap(~any, scales = "free") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, color = any, group = any)) +
# geom_point(size = 0.5) +
geom_bar() +
scale_color_brewer(palette = "Set1", name = "Year") +
facet_wrap(~any, scales = "free") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, group = any)) +
# geom_point(size = 0.5) +
geom_bar() +
scale_color_brewer(palette = "Set1", name = "Year") +
facet_wrap(~any, scales = "free") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, group = any)) +
# geom_point(size = 0.5) +
geom_bar() +
facet_wrap(~any, scales = "free") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional)) +
# geom_point(size = 0.5) +
geom_bar() +
facet_wrap(~any, scales = "free") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
View(població_estacional_ETCA)
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, color = any, group = any)) +
geom_point(size = 0.5) +
geom_line(linewidth = 0.75) +
scale_color_brewer(palette = "Set1", name = "Year") +
labs(x = "Trimestre", y = "Població estacional ETCA", color = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, fill = any, group = any)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_brewer(palette = "Set1", name = "Year") +
labs(x = "Trimestre", y = "Població estacional ETCA", fill = "Year")
plot
plot <- població_estacional_ETCA %>%
ggplot(aes(x = trimestre, y = població_estacional, fill = any, group = any)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_brewer(palette = "Set2", name = "Year") +
labs(x = "Trimestre", y = "Població estacional ETCA", fill = "Year")
plot
View(població_estacional_ETCA)
# Població estacional ----------------------------------------------------------
població_ETCA <- read.csv("Data/Human_data/Població_estacional_Alt_Empordà.csv")
View(població_ETCA)
library(readxl)
library(tidyverse)
library(lubridate)
library(dplyr)
library(ggplot2)
library(lme4)
library(glmmTMB)
library(DHARMa)
library(performance)
library(car)
library(MuMIn)
library(corrplot)
library(cmdstanr)
library(brms)
library(rstanarm)
library(loo)
library(tidybayes)
library(RColorBrewer)
# Delete all variables
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# setwd("/home/fbartu/Research/Julia_Rodriguez/PNAE")
# Read excel
culex_df <- read_excel("Data/Mosquito_data/Culex/culex_df.xlsx")
# Convert variables
culex_df$trap_name <- as.factor(culex_df$trap_name)
culex_df$AMT <- as.factor(culex_df$AMT)
culex_df$year <- factor(culex_df$year)
culex_df$month <- factor(culex_df$month, ordered = TRUE, levels = as.character(1:12))
culex_df$week <- factor(culex_df$week, ordered = TRUE, levels = as.character(1:53))
culex_df$trap_type <- as.factor(culex_df$trap_type)
culex_df$land_use <- as.factor(culex_df$land_use)
library(readxl)
library(brms)
library(tidyverse)
library(cmdstanr) # Solo si estás usando cmdstanr como backend
library(bayesplot) # Opcional para visualización
# Delete all variables
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Read excel
culex_df <- read_excel("Data/Mosquito_data/Culex/culex_df.xlsx")
# Convert variables
culex_df$trap_name <- as.factor(culex_df$trap_name)
culex_df$AMT <- as.factor(culex_df$AMT)
culex_df$year <- factor(culex_df$year)
culex_df$month <- factor(culex_df$month, ordered = TRUE, levels = as.character(1:12))
culex_df$week <- factor(culex_df$week, ordered = TRUE, levels = as.character(1:53))
culex_df$trap_type <- as.factor(culex_df$trap_type)
culex_df$land_use <- as.factor(culex_df$land_use)
# Función para calcular la cross-validation con el modelo brms
cros_val <- function(culex_df, formula, family, nam = "variables", n = 10) {
# Dataframe vacío para almacenar resultados
cv_all <- data.frame()
for (i in 1:n) {
cat("Iteración:", i, "\n")
# Dividir datos en conjuntos de entrenamiento y prueba para cada iteración
sample <- sample(c(TRUE, FALSE), nrow(culex_df), replace = TRUE, prob = c(0.8, 0.2))
train <- culex_df[sample, ]
test <- culex_df[!sample, ]
# Ajuste del modelo usando brm y la fórmula especificada
model <- brm(
formula = formula,
data = train,
family = family,
prior = set_prior("cauchy(0,2.5)", class = "b"),
iter = 7000,
chains = 4,
cores = 4,
backend = "cmdstanr",
control = list(adapt_delta = 0.999),
silent = TRUE
)
# Predicción en el conjunto de prueba
pp <- round(predict(model, newdata = test, re_formula = NA)[, "Estimate"], 0)
# Cálculo de métricas de evaluación
cv <- data.frame(
model = nam,
AIC = AIC(model),
R2 = cor(pp, test$females)^2, # R2 calculado manualmente como el cuadrado de la correlación entre observados y predichos
RMSE = sqrt(mean((pp - test$females)^2)), # Raíz del error cuadrático medio
MAE = mean(abs(pp - test$females)), # Error absoluto medio
pred.error = sqrt(mean((pp - test$females)^2)) / mean(test$females) # Error de predicción
)
# Agregar resultados a cv_all
cv_all <- rbind(cv_all, cv)
}
return(cv_all)
}
# Llamada a la función con tus datos y modelo
cv_all <- cros_val(
culex_df = culex_df,
formula = bf(females ~ scale(TM) + scale(HRM7) + scale(PPT21) +
(1|year:trap_name) + (1|land_use)),
family = zero_inflated_negbinomial(link = "log"),
nam = "Culex ZINB Model",
n = 10
)
buffer_250 <- read_csv("Data/Land_uses/Buffer_250.csv")
buffer_250 <- buffer_250 %>%
group_by(trap_name, DN) %>%
summarise(area = sum(area)) %>%
pivot_wider(names_from = "DN", values_from = "area", values_fill = 0) %>%
dplyr::select(trap_name, `2`, `4`, `5`,`6`,`7`,`9`,`10`,`11`,`14`,`15`,`16`,`17`,`19`,
`20`,`21`,`22`,`23`,`24`)
buffer_250$urban_area <- buffer_250$`4` + buffer_250$`5` + buffer_250$`6` + buffer_250$`7`
buffer_250$wetland <- buffer_250$`2` + buffer_250$`10`
buffer_250$herbaceous_crops <- buffer_250$`19` + buffer_250$`20`
buffer_250$rice_field <- buffer_250$`21`
buffer_250 <- buffer_250 %>%
dplyr::select(urban_area, wetland, herbaceous_crops, rice_field,
`9`,`11`,`14`,`15`,`16`,`17`,`22`,`23`,`24`) %>%
pivot_longer(!c(trap_name), names_to = "land_cover", values_to = "area") %>%
arrange(trap_name, desc(area))
buffer_250 <- buffer_250 %>%
group_by(trap_name) %>%
mutate(has_rice_field = any(land_cover == "rice_field" & area > 0)) %>%
filter(ifelse(has_rice_field, land_cover == "rice_field" & area > 0, area == max(area))) %>%
ungroup() %>%
dplyr::select(-has_rice_field, -area)
traps <- read_excel("Data/Mosquito_data/traps.xlsx")
traps <- merge(traps, buffer_250, by = "trap_name") %>%
dplyr::select(trap_name, trap_type, land_cover)
View(traps)
View(buffer_250)
